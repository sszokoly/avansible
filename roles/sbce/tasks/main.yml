---
- name: Setting ansible_ssh_common_args when ssh_proxy is defined
  set_fact:
    ansible_ssh_common_args: "{{ ssh_args }}"
  when: ssh_proxy is defined

- name: Obtaining `EASGStatus` of {{ inventory_hostname }}
  shell: "echo $(/usr/bin/EASGStatus) 2>/dev/null"
  register: EASGStatus_output

- name: Setting 'EASGStatus' fact for {{ inventory_hostname }}
  set_fact:
    EASGStatus: "{{ EASGStatus_output.stdout }}"
    cacheable: yes

- name: Obtaining `ipcs-version` of {{ inventory_hostname }}
  shell: "sudo /usr/local/ipcs/icu/scripts/ipcs-version"
  register: ipcs_version_output

- name: Setting 'ipcs_version' fact for {{ inventory_hostname }}
  set_fact:
    swversion: "{{ ipcs_version_output.stdout }}"
    cacheable: yes

- name: Obtaining 'sysinfo' file of {{ inventory_hostname }}
  become: yes
  slurp:
    src: /usr/local/ipcs/etc/sysinfo
  register: sysinfo
  when: ansible_become_pass is defined

- name: Setting 'sysinfo' fact for {{ inventory_hostname }}
  vars:
    syslog_keystore_regex: "(-----BEGIN CERTIFICATE-----.+?-----END CERTIFICATE-----)"
    syslog_keystore_cert: "{{ syslog_keystore['content'] | b64decode | regex_findall(syslog_keystore_regex) }}"
  set_fact:
    sysinfo: "{{ sysinfo['content'] | b64decode }}"
    cacheable: yes
  when: ansible_become_pass is defined

- name: Obtaining backup_servers' of {{ inventory_hostname }}
  become: yes
  vars:
    sql: >
      "SELECT
        name,
        user_name,
        address,
        location
      FROM sftp_servers"
  shell: "psql -t -U postgres {{ item }} -AtF',' -c {{ sql }}"
  register: sftp_servers_output
  with_items:
    - commondb
    - sbcedb
  when: ansible_become_pass is defined

- name: Setting 'backup_config' fact for {{ inventory_hostname }}
  vars:
    keys_list: ['server_name', 'user_name', 'ip_port', 'path']
  set_fact:
    backup_config: "{{ backup_config | default({}) | combine({ item.item: dict(keys_list | zip(item.stdout | split(','))) }) }}"
    cacheable: yes
  with_items:
    - "{{ sftp_servers_output.results }}"
  when: ansible_become_pass is defined

- name: Obtaining 'gui_config' of {{ inventory_hostname }}
  become: yes
  vars:
    sql: >
      "SELECT * 
      FROM gui_config
      WHERE name LIKE 'RESTORE%'"
  shell: "psql -t -U postgres {{ item }} -AtF',' -c {{ sql }}"
  register: gui_config_output
  when: ansible_become_pass is defined
  with_items:
    - commondb
    - sbcedb

- name: Creating 'backup_frequency' fact for {{ inventory_hostname }}
  set_fact:
    backup_frequency: "{{ backup_frequency | default({}) | combine({ item.item: dict({ 'freq': item.stdout_lines }) }, recursive=True) }}"
  when: ansible_become_pass is defined
  with_items: "{{ gui_config_output.results }}"
- debug:
    var: backup_frequency

- name: Loop through nested list
  vars:
    my_list:
      - [item1, [value1, value2, value3]]
      - [item2, [value4, value5]]
  debug:
    msg: "Item: {{ item.0 }}, Subitem: {{ item.1 }}"
  with_subelements:
    - "{{ my_list }}"
    - "[1]"

- name: Convert list to dict
  debug:
  #set_fact:
    msg: "Item: {{ item.0.item }}, Subitem: {{ item.1 }}"
    #msg: "{{ gui_config_output.results }}"
    #my_dict: "{{ my_dict | default({}) | combine({ item.0.item: dict(item.1 | map('split', ',', 1) | items2dict }) }}"
  with_subelements:
    - "{{ gui_config_output.results }}"
    - "{{ gui_config_output.results }}"

- debug:
    var: my_dict

- name: Test
  set_fact:
    my_dict: "{{ item.stdout_lines | map('split', ',', 1) | map('list') | list | items2dict }}"
  with_items: "{{ gui_config_output.results }}"
- name: Print resulting dictionary
  debug:
    var: my_dict

- name: Updating 'backup_config' fact for {{ inventory_hostname }}
  set_fact:
    backup_config: "{{ backup_config | combine(backup_frequency, recursive=True) }}"
    cacheable: yes
  with_dict: "{{ backup_frequency }}"
  when: ansible_become_pass is defined
- debug:
    var: backup_config

- name: Obtaining active alarms from {{ inventory_hostname }} database
  become: yes
  vars:
    sql: >
      "SELECT
        to_timestamp(alarm_timestampsecs/1000) as date,
        trap_severity_level as severity,
        alarm_notes as description
      FROM alarms
      ORDER BY alarm_timestampsecs DESC
      LIMIT 10"
  shell: "/bin/psql -U postgres {{ item }} --pset='footer=off' -AqF',' -c {{ sql }}"
  when: ansible_become_pass is defined
  register: alarms_output
  with_items:
    - commondb
    - sbcedb

- name: Setting 'alarms' fact for {{ inventory_hostname }}
  set_fact:
    alarms: "{{ alarms | default({}) | combine({ item.item: item.stdout }) }}"
    cacheable: yes
  with_items:
    - "{{ alarms_output.results }}"
  when: ansible_become_pass is defined

- name: Getting the list of certificates on {{ inventory_hostname }}
  become: yes
  find:
    paths: "/usr/local/ipcs/cert/certificate/"
  register: certificate_list
  when: ansible_become_pass is defined

- name: Obtaining certificates of {{ inventory_hostname }}
  become: yes
  slurp:
    src: '{{ item.path }}'
  register: certificates_files
  with_items: "{{ certificate_list.files }}"

- name: Adding certificates to 'certificates' fact for {{ inventory_hostname }}
  set_fact:
    certificates: "{{ certificates | default({}) | combine({ item['source'] | basename : item['content'] | b64decode }) }}"
    cacheable: yes
  with_items:
    - "{{ certificates_files.results }}"
...