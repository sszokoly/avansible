---
- name: Setting ansible_ssh_common_args when ssh_proxy is defined
  set_fact:
    ansible_ssh_common_args: "{{ ssh_args }}"
  when: ssh_proxy is defined
  tags:
  - ssh_proxy

- name: Obtaining `sysTool -st` from {{ inventory_hostname }}
  shell: "sudo /opt/avaya/bin/sysTool.sh -st"
  register: sysTool_output
  tags:
  - swversion

- name: Setting 'sysTool' fact for {{ inventory_hostname }}
  set_fact:
    swversion: "{{ swversion | default({}) | combine({ 'sysTool': sysTool_output.stdout }) }}"
    cacheable: yes
  tags:
  - swversion

- name: Obtaining platform version from {{ inventory_hostname }} database
  become: yes
  vars:
    sql: >
      "SELECT 
        version
      FROM sw_inventory
      WHERE swname='platform'"
  shell: "/opt/avaya/app/amsinst/ma/MAS/MySql/bin/mysql -NB -uplatdbuser -pplatdbpass -D emplatcore -e {{ sql }}"
  when: ansible_become_pass is defined
  register: platform_version_output
  tags:
  - swversion

- name: Updating 'swversion' fact for {{ inventory_hostname }}
  set_fact:
    swversion: "{{ swversion | default({}) | combine({ 'platform': platform_version_output.stdout }) }}"
    cacheable: yes
  when: ansible_become_pass is defined and platform_version_output.stdout != ""
  tags:
  - swversion

- name: Obtaining `EASGStatus` of {{ inventory_hostname }}
  shell: "/usr/bin/EASGStatus"
  register: EASGStatus_output
  tags:
  - easg

- name: Setting 'EASGStatus' fact for {{ inventory_hostname }}
  set_fact:
    EASGStatus: "{{ EASGStatus_output.stdout }}"
    cacheable: yes
  tags:
  - easg

- name: Obtaining backup config from {{ inventory_hostname }} database
  become: yes
  vars:
    sql: >
      "SELECT 
        dst.destination_name,
        dst.destination_path,
        dst.destination_host,
        dst.destination_username,
        bkp.backup_schedule
      FROM destinations AS dst
      LEFT JOIN backups AS bkp ON bkp.backup_destination_id=dst.destination_id
      WHERE bkp.backup_schedule is NOT null"
  shell: '/opt/avaya/app/amsinst/ma/MAS/MySql/bin/mysql -uplatdbuser -pplatdbpass -D eam -e {{ sql }}'
  when: ansible_become_pass is defined
  register: backup_config_output
  tags:
  - backup

- name: Setting 'backup' fact for {{ inventory_hostname }}
  set_fact:
    backup: "{{ backup | default({}) | combine({ 'config': backup_config_output.stdout }) }}"
    cacheable: yes
  when: ansible_become_pass is defined and backup_config_output.stdout != ""
  tags:
  - backup

- name: Obtaining backup history from {{ inventory_hostname }} database
  become: yes
  vars:
    sql: >
      "SELECT
        task_name,
        task_status,
        task_date
      FROM tasks_log
      WHERE task_type='Backup'
      ORDER BY task_date DESC
      LIMIT 10"
  shell: '/opt/avaya/app/amsinst/ma/MAS/MySql/bin/mysql -uplatdbuser -pplatdbpass -D eam -e {{ sql }}'
  when: ansible_become_pass is defined
  register: backup_history_output
  tags:
  - backup

- name: Updating 'backup' fact for {{ inventory_hostname }}
  set_fact:
    backup: "{{ backup | default({}) | combine({ 'history': backup_history_output.stdout }) }}"
    cacheable: yes
  when: ansible_become_pass is defined and backup_history_output.stdout != ""
  tags:
  - backup

- name: Obtaining active alarms from {{ inventory_hostname }} database
  become: yes
  vars:
    sql: >
      "SELECT
        i18n.description,
        alm.timestamp
      FROM alarm_i18n AS i18n
      RIGHT JOIN alarm AS alm
      ON alm.alarmid=i18n.alarmid
      ORDER BY alm.timestamp DESC
      LIMIT 10"
  shell: '/opt/avaya/app/amsinst/ma/MAS/MySql/bin/mysql -uplatdbuser -pplatdbpass -D emplatcore -e {{ sql }}'
  when: ansible_become_pass is defined
  register: alarms_output
  tags:
  - alarms

- name: Setting 'alarms' fact for {{ inventory_hostname }}
  set_fact:
    alarms: "{{ alarms_output.stdout }}"
    cacheable: yes
  when: ansible_become_pass is defined and alarms_output.stdout != ""
  tags:
  - alarms

- name: Obtaining 'admin' password set time from {{ inventory_hostname }}
  become: yes
  vars:
    sql: >
      "SELECT
        passwd_set_timestamp
      FROM administrator
      WHERE name='admin'"
  shell: '/opt/avaya/app/amsinst/ma/MAS/MySql/bin/mysql -B -uplatdbuser -pplatdbpass -D eam -e {{ sql }}'
  when: ansible_become_pass is defined
  register: passwd_set_timestamp
  tags:
  - users

- name: Updating 'users' facts with Web 'admin' password set time for {{ inventory_hostname }}
  set_fact:
    users: "{{ users | default({}) | combine({ 'web': dict({'admin': passwd_set_timestamp.stdout }) }, recursive=True) }}"
    cacheable: yes
  when: ansible_become_pass is defined
  tags:
  - users

- name: Obtaining certificates from {{ inventory_hostname }}
  get_certs:
    name: "{{ item.name }}"
    host: "{{ item.host }}"
    port: "{{ item.port }}"
    starttls: "{{ item.starttls }}"
  with_items:
    - { name: "signaling", host: "{{ ansible_host }}", port: 5061, starttls: "" }
    - { name: "oam", host: "{{ ansible_host }}", port: 7411, starttls: "" }
    - { name: "application", host: "{{ ansible_host }}", port: 7151, starttls: "" }
    - { name: "clustering", host: "127.0.0.1", port: 3306, starttls: "mysql" }
  register: get_certs_output
  tags:
  - certificates

- name: Setting 'certificates' fact for {{ inventory_hostname }}
  set_fact:
    certificates: "{{ certificates | default({}) | combine({ item.1: get_certs_output.results[item.0][item.1] }) }}"
    cacheable: yes
  with_indexed_items:
    - "signaling"
    - "oam"
    - "application"
    - "clustering"
  tags:
  - certificates
...