---
- name: Setting ansible_ssh_common_args when ssh_proxy is defined
  set_fact:
    ansible_ssh_common_args: "{{ ssh_args }}"
  when: ssh_proxy is defined

- name: Obtaining `swversion` of {{ inventory_hostname }}
  become: yes
  shell: "/opt/avaya/common_services/swversion"
  register: swversion_output

- name: Setting 'swversion' fact for {{ inventory_hostname }}
  set_fact:
    swversion: "{{ swversion_output.stdout }}"
    cacheable: yes

- name: Obtaining `EASGStatus` of {{ inventory_hostname }}
  shell: "echo $(/usr/bin/EASGStatus)"
  register: EASGStatus_output

- name: Setting 'EASGStatus' fact for {{ inventory_hostname }}
  set_fact:
    EASGStatus: "{{ EASGStatus_output.stdout }}"
    cacheable: yes

- name: Obtaining SALMon backup history of {{ inventory_hostname }}
  shell: "grep 'backup is created' /var/log/backup.log | tail"
  register: salmon_backup_history

- name: Setting 'backup_history' fact with SALMon for {{ inventory_hostname }}
  set_fact:
    backup_history: "{{ backup_history | default({}) | combine({ 'salmon': salmon_backup_history.stdout }) }}"
    cacheable: yes

- name: Obtaining SALGW backup history of {{ inventory_hostname }}
  shell: "ls -tr /var/log/SALLogs/messages.log* | xargs grep 'backup is completed' | tail | sort | uniq"
  register: salgw_backup_history

- name: Updating 'backup_history' fact with SALGW for {{ inventory_hostname }}
  set_fact:
    backup_history: "{{ backup_history | default({}) | combine({ 'salgw': salgw_backup_history.stdout }) }}"
    cacheable: yes

- name: Obtaining SALGW 'backupConfig.xml' of {{ inventory_hostname }}
  become: yes
  slurp:
    src: /opt/avaya/SAL/gateway/GatewayUI/config/backupConfig.xml
  register: backupConfig
  when: ansible_become_pass is defined

- name: Setting 'backup_config' fact with backupConfig for {{ inventory_hostname }}
  set_fact:
    backup_config: "{{ backup_config | default({}) | combine({ 'salgw': backupConfig['content'] | b64decode }) }}"
    cacheable: yes
  when: ansible_become_pass is defined

- name: Obtaining certificates of {{ inventory_hostname }}
  get_certs:
    name: "{{ item.name }}"
    host: "{{ item.host }}"
    port: "{{ item.port }}"
    starttls: "{{ item.starttls }}"
  with_items:
    - { name: "slamon", host: "{{ ansible_host }}", port: 4511 , starttls: "" }
    - { name: "salgw", host: "{{ ansible_host }}", port: 7443 , starttls: "" }
  register: get_certs_output

- name: Setting 'certificates' fact for {{ inventory_hostname }}
  set_fact:
    certificates: "{{ certificates | default({}) | combine({ item.1: get_certs_output.results[item.0][item.1] }) }}"
    cacheable: yes
  with_indexed_items:
    - "slamon"
    - "salgw"
...