---
- name: Setting 'group_names' fact for {{ inventory_hostname }}
  set_fact:
    group_names: "{{ group_names }}"
    cacheable: yes

- name: Obtaining `vmware-toolbox-cmd stat` from {{ inventory_hostname }}
  ansible.windows.win_command:
    argv: 
    - C:\Program Files\VMware\VMware Tools\VMwareToolboxCmd.exe
    - stat 
    - "{{ item }}"
  with_items:
    - "cpures"
    - "memres"
  register: vmware_toolbox_cmd_output
  tags:
  - vmware-toolbox

- name: Setting 'vmware_toolbox_cmd' fact for {{ inventory_hostname }}
  set_fact:
    vmware_toolbox_cmd: "{{ vmware_toolbox_cmd | default({}) | combine({ item.item: item.stdout | trim }) }}"
    cacheable: yes
  with_items: "{{ vmware_toolbox_cmd_output.results }}"
  when: vmware_toolbox_cmd_output is defined
  tags:
  - vmware-toolbox

- name: Obtaining `fsutil fsinfo drives` from {{ inventory_hostname }}
  ansible.windows.win_command:
    argv: 
    - fsutil
    - fsinfo
    - drives
  register: drives_output

- name: Setting 'drives' for {{ inventory_hostname }}
  set_fact:
    drives: "{{ drives_output.stdout | regex_findall('([C-Z]):') }}"
    cacheable: yes

- name: Obtaining `Get-WBSummary` from {{ inventory_hostname }}
  ansible.windows.win_powershell:
    script:  Get-WBSummary
  register: wbsummary_output
  tags:
  - backup

- name: Setting 'backup' fact for {{ inventory_hostname }}
  set_fact:
    backup: "{{ backup | default({}) | combine({ 'history': wbsummary_output.output[0] }) }}"
    cacheable: yes
  when: wbsummary_output is defined
  tags:
  - backup

- name: Obtaining `Get-WBPolicy` from {{ inventory_hostname }}
  ansible.windows.win_powershell:
    script:  Get-WBPolicy
  register: wbpolicy_output
  tags:
  - backup

- name: Updating 'backup' fact for {{ inventory_hostname }}
  set_fact:
    backup: "{{ backup | default({}) | combine({ 'config': wbpolicy_output.output[0] }) }}"
    cacheable: yes
  when: wbpolicy_output is defined
  tags:
  - backup
...