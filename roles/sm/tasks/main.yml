---
- name: Setting ansible_ssh_common_args when ssh_proxy is defined
  set_fact:
    ansible_ssh_common_args: "{{ ssh_args }}"
  when: ssh_proxy is defined

- name: Obtaining `swversion` of {{ inventory_hostname }}
  shell: "sudo /opt/Avaya/bin/swversion"
  register: swversion_output

- name: Setting 'swversion' fact for {{ inventory_hostname }}
  set_fact:
    swversion: "{{ swversion_output.stdout }}"
    cacheable: yes

- name: Obtaining `av-version` of {{ inventory_hostname }}
  shell: "/opt/avaya/common-os/bin/av-version"
  register: av_version_output

- name: Updating 'swversion' fact for {{ inventory_hostname }}
  set_fact:
    swversion: "{{ swversion + '\n' + av_version_output.stdout }}"
    cacheable: yes
  when: av_version_output.stdout != ""

- name: Obtaining `EASGStatus` of {{ inventory_hostname }}
  shell: "echo $(/usr/bin/EASGStatus)"
  register: EASGStatus_output

- name: Setting 'EASGStatus' fact for {{ inventory_hostname }}
  set_fact:
    EASGStatus: "{{ EASGStatus_output.stdout }}"
    cacheable: yes

- name: Obtaining `statapp` of {{ inventory_hostname }}
  shell: "/opt/Avaya/bin/statapp"
  register: statapp_output

- name: Setting 'statapp' fact for {{ inventory_hostname }}
  set_fact:
    statapp: "{{ statapp_output.stdout }}"
    cacheable: yes

- name: Obtaining `smconfig` of {{ inventory_hostname }}
  shell: "sudo /opt/Avaya/bin/smconfig"
  register: smconfig_output

- name: Setting 'smconfig' fact for {{ inventory_hostname }}
  set_fact:
    smconfig: "{{ smconfig_output.stdout }}"
    cacheable: yes

- name: Obtaining backup config from {{ inventory_hostname }} database
  become: yes
  vars:
    sql: >
      "SELECT 
        split_part(name, '.', 3) AS name,
        value
      FROM asmprovparm
      WHERE name LIKE 'sm.backup%'"
  shell: "/bin/mgmtia asm -P pager=off --csv -c {{ sql }}"
  when: ansible_become_pass is defined
  register: backup_config_output

- name: Setting 'backup' fact for {{ inventory_hostname }}
  set_fact:
    backup: "{{ backup | default({}) | combine({ 'config': backup_config_output.stdout }) }}"
    cacheable: yes
  when: ansible_become_pass is defined

- name: Obtaining backup history from {{ inventory_hostname }}
  shell: "ls -tr /var/log/Avaya/cassandra/backup.log* | xargs grep DB | tail"
  register: backup_history_output

- name: Updating 'backup' fact for {{ inventory_hostname }}
  set_fact:
    backup: "{{ backup | default({}) | combine({ 'history': backup_history_output.stdout }) }}"
    cacheable: yes

- name: Obtaining certificates of {{ inventory_hostname }}
  vars:
    secmodip_regex: "Local Security Module: ([^ \n]+)"
    secmodip: "{{ smconfig_output.stdout | regex_search(secmodip_regex, '\\1') | first }}"
  get_certs:
    name: "{{ item.name }}"
    host: "{{ item.host }}"
    port: "{{ item.port }}"
    starttls: "{{ item.starttls }}"
  with_items:
    - { name: "securitymodule_sip", host: "127.0.0.2", port: 15061, starttls: "" }
    - { name: "securitymodule_http", host: "{{ secmodip }}", port: 443, starttls: "" }
    - { name: "mgmt", host: "{{ ansible_host }}", port: 2009, starttls: "" }
    - { name: "postgres", host: "127.0.0.1", port: 5432, starttls: "postgres" }
  register: get_certs_output

- name: Setting 'certificates' fact for {{ inventory_hostname }}
  set_fact:
    certificates: "{{ certificates | default({}) | combine({ item.1: get_certs_output.results[item.0][item.1] }) }}"
    cacheable: yes
  with_indexed_items:
    - "securitymodule_sip"
    - "securitymodule_http"
    - "mgmt"
    - "postgres"

# - name: Obtaining syslog certificates of {{ inventory_hostname }}
#   become: yes
#   slurp:
#     src: $JBOSS_HOME/standalone/configuration/tm/keystore/syslog_keystore.pem
#   register: syslog_keystore
#   when: ansible_become_pass is defined

# - name: Adding syslog certificate to 'certificates' fact for {{ inventory_hostname }}
#   vars:
#     syslog_keystore_regex: "(-----BEGIN CERTIFICATE-----.+?-----END CERTIFICATE-----)"
#     syslog_keystore_cert: "{{ syslog_keystore['content'] | b64decode | regex_findall(syslog_keystore_regex) }}"
#   set_fact:
#     certificates: "{{ certificates | default({}) | combine({ 'syslog': syslog_keystore_cert }) }}"
#     cacheable: yes
#   when: ansible_become_pass is defined
...