- name: "Get 'target_folder' status"
  ansible.builtin.stat:
    path: "{{ target_folder }}"
  register: target_folder_info
  delegate_to: "{{ target_host }}"

- name: "Fail if 'target_folder' does not exist"
  when: not target_folder_info.stat.exists
  ansible.builtin.fail:
    msg: "'{{ target_host }}:{{ target_folder }}' does not exist"
  delegate_to: "{{ target_host }}"

- name: "Get available disk space on 'target_folder'"
  become: true
  ansible.builtin.shell: df {{ target_folder }} | awk 'NR==2 {print $4}'
  register: dest_disk_space
  delegate_to: "{{ target_host }}"
  delegate_facts: true

- name: "Get 'src_file' file status"
  ansible.builtin.stat:
    path: "{{ src_file }}"
    checksum_algorithm: md5
  register: src_file_info

- name: "Fail if disk space on 'target_folder' is not sufficient"
  when: (dest_disk_space.stdout | int * 1024) < src_info.stat.size
  ansible.builtin.fail:
    msg: >-
      Disk space on {{ target_host }}:{{ target_folder }} is not sufficient
      Required: {{ (src_file_info.stat.size | int / 1048576) | int }} MB,
      Available: {{ (dest_disk_space.stdout | int * 1024 / 1048576) | int }} MB

- name: "Set 'src_basename' variable from '{{ src_file }}'"
  ansible.builtin.set_fact:
    src_basename: "{{ src_file | basename }}"

- name: "Get '{{ target_host }}:{{ target_folder }}/{{ src_basename }}' file status"
  ansible.builtin.stat:
    path: "{{ target_folder }}/{{ src_basename }}"
    checksum_algorithm: md5
  register: dest_file_info
  delegate_to: "{{ target_host }}"
  delegate_facts: true

- name: "Set 'delegate_to' variable, defaults to 'inventory_hostname'"
  ansible.builtin.set_fact:
    delegate_to: "{{ delegate_to | default(inventory_hostname) }}"

- name: "SCP '{{ src }}' to '{{ target_host }}'"
  when: not dest_file_info.stat.exists or
        (dest_file_info.stat.checksum != src_info.stat.checksum)
  scp_expect:
    src: "{{ src }}"
    dest: "{{ target_folder }}"
    host: "{{ hostvars[target_host]['ansible_host'] }}"
    user: "{{ hostvars[target_host]['ansible_user'] }}"
    password: "{{ hostvars[target]['ansible_ssh_pass'] }}"
  register: result
  delegate_to: "{{ delegate_to }}"
  delegate_facts: true

- name: "Fail if copying '{{ src }}' to '{{ target }}:{{ target_folder }}' failed"
  when:
    - not result.skipped | default(false)
    - result is defined
    - result.failed
  ansible.builtin.fail:
    msg: "Copying '{{ src }}' to '{{ target }}:{{ target_folder }}' failed"
