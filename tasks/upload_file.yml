---
# This playbook uploads files to the a target group / host(s), optionally through a staging host.
# Extra Vars (--extra-vars):
# - `src`: Path to the source file to be uploaded.
# - `target`: Target group or host(s) from inventory where the file will be uploaded.
# - `staging_host`: Optional staging host to upload the file before copying it to the target.
# - `staging_folder`: Optional folder on the staging host where the file will be uploaded.
# - `target_folder`: Optional folder on the target host(s) where the file will be copied.
# - `serial`: Optional number of tasks to run at the same time (default is 3).
# - `outfile`: Optional filename to write result of uploads per host (default is result_upload_file__<src_basename>__<datetime in iso8601>.out).
# Note: The playbook assumes the `scp_expect` module is available for copying files from staging host to target host(s).

# Example usage:
# ansible-playbook upload_file.yml --extra-vars "\
#   src=</path/to/file> \
#   target=<target group> \
#   staging_host=<staging host> \
#   staging_folder=<path/to/staging_folder> \
#   target_folder=</path/to/target_folder> \
#   serial=3 \
#   outfile=result_uploads.txt"
#
# SPDX-License-Identifier: GPL-3.0-or-later

-
  #### Setting up variables and uploading file to staging host####
  hosts: localhost
  gather_facts: false
  gather_subset: min

  tasks:
    - name: "Fail if 'src' file argument is not in --extra-vars"
      when: src is not defined
      ansible.builtin.fail:
        msg: "'src' file argument is not in --extra-vars"

    - name: "Fail if 'target' host/group argument is not in --extra-vars"
      when: target is not defined
      ansible.builtin.fail:
        msg: "'target' host/group argument is not in --extra-vars"

    - name: "Get file status for '{{ src }}'"
      ansible.builtin.stat:
        path: "{{ src }}"
        checksum_algorithm: md5
      register: src_info

    - name: "Fail if '{{ src }}' does not exist"
      when: not src_info.stat.exists
      ansible.builtin.fail:
        msg: "'{{ src }}' does not exist"

    # - name: "Fail if '{{ target }}' is not a valid host/group in the inventory"
    #   when: target not in groups and target not in groups['all']
    #   ansible.builtin.fail:
    #     msg: "'{{ target }}' is not a valid host/group in the inventory"

    - name: "Set 'src_dirname' and 'src_basename' variables from '{{ src }}'"
      ansible.builtin.set_fact:
        src_dirname: "{{ src | dirname }}"
        src_basename: "{{ src | basename }}"

    - name: "Fail if '{{ staging_host }}' is not a valid host in the inventory"
      when: staging_host is defined and staging_host not in groups['all']
      ansible.builtin.fail:
        msg: "'{{ staging_host }}' is not a valid host in the inventory"

    - name: "Set 'staging_host' variable, defaults to 'localhost'"
      ansible.builtin.set_fact:
        staging_host: "{{ staging_host | default('localhost') }}"

    - name: "Set 'staging_folder' variable, defaults to '~' or specific path based on staging host type"
      ansible.builtin.set_fact:
        staging_folder: "{{
            staging_folder if staging_folder is defined else
            src_dirname if staging_host == 'localhost' else
            '/swlibrary' if staging_host in groups['SMGR'] else
            '/var/home/ftp/pub' if staging_host in groups['CM'] else
            '~'
          }}"

    - name: "Set 'target_folder' variable, defaults to '~'"
      ansible.builtin.set_fact:
        target_folder: "{{ target_folder | default('~') }}"

    - name: "Get timestamp from system"
      ansible.builtin.shell: "date +%Y%m%d_%H%M%S"
      register: timestamp

    - name: "Set 'outfile' variable"
      ansible.builtin.set_fact:
        outfile: "{{ outfile | default('result_upload_file__' + src_basename + '__' + timestamp.stdout + '.out') }}"

    - name: "Transfer 'src' to targets if 'staging_host' is not 'localhost'"
      when: staging_host != 'localhost'
      block:
        - name: "Get folder status for '{{ staging_folder }}'"
          ansible.builtin.stat:
            path: "{{ staging_folder }}"
          register: staging_folder_info
          delegate_to: "{{ staging_host }}"
          delegate_facts: true

        - name: "Fail if '{{ staging_folder }}' does not exist"
          when: not staging_folder_info.stat.exists
          ansible.builtin.fail:
            msg: "'{{ staging_host }}:{{ staging_folder}}' does not exist"

        - name: "Get available disk space on '{{ staging_folder }}'"
          become: true
          ansible.builtin.shell: df {{ staging_folder }} | awk 'NR==2 {print $4}'
          register: staging_folder_disk_space
          delegate_to: "{{ staging_host }}"
          delegate_facts: true

        - name: "Fail if disk space on '{{ staging_folder }}' is insufficient"
          when: (staging_folder_disk_space.stdout | int * 1024) < src_info.stat.size
          ansible.builtin.fail:
            msg: >-
              Disk space on {{ staging_host }}:{{ staging_folder }} is insufficient
              Required: {{ (src_info.stat.size | int / 1048576) | int }} MB,
              Available: {{ (staging_folder_disk_space.stdout | int * 1024 / 1048576) | int }} MB

        - name: "Set 'src_basename' variable from '{{ src }}'"
          ansible.builtin.set_fact:
            src_basename: "{{ src | basename }}"

        - name: "Get file status for '{{ staging_host }}:{{ staging_folder }}/{{ src_basename }}'"
          ansible.builtin.stat:
            path: "{{ staging_folder }}/{{ src_basename }}"
            checksum_algorithm: md5
          register: staging_file_info
          delegate_to: "{{ staging_host }}"
          delegate_facts: true

        - name: "SCP '{{ src }}' to '{{ staging_host }}:{{ staging_folder }}'"
          when: not staging_file_info.stat.exists or
                (staging_file_info.stat.checksum != src_info.stat.checksum)
          scp_expect:
            src: "{{ src }}"
            dest: "{{ staging_folder }}"
            host: "{{ hostvars[staging_host]['ansible_host'] }}"
            user: "{{ hostvars[staging_host]['ansible_user'] }}"
            password: "{{ hostvars[staging_host]['ansible_ssh_pass'] }}"
          register: result

        - name: "Fail if copying '{{ src }}' to '{{ staging_host }}:{{ staging_folder }}' failed"
          when:
            - not result.skipped | default(false)
            - result is defined
            - result.failed
          ansible.builtin.fail:
            msg: "Copying '{{ src }}' to '{{ target }}:{{ target_folder }}' failed"
-
  #### Copying 'src' file to target host(s) optionally through staging host ####
  hosts: "{{ hostvars['localhost']['target'] }}"
  throttle: "{{ 3 if hostvars['localhost']['throttle'] is not defined else hostvars['localhost']['throttle'] }}"
  gather_facts: false

  tasks:
    - name: "Import variables from hostvars"
      ansible.builtin.set_fact:
        src_basename: "{{ hostvars['localhost']['src_basename'] }}"
        src_info: "{{ hostvars['localhost']['src_info'] }}"
        staging_host: "{{ hostvars['localhost']['staging_host'] }}"
        staging_folder: "{{ hostvars['localhost']['staging_folder'] }}"
        target_folder: "{{ hostvars['localhost']['target_folder'] }}"
        outfile: "{{ hostvars['localhost']['outfile'] }}"

    - name: "Check if host is reachable"
      ansible.builtin.ping:
      ignore_unreachable: true
      register: ping_result
      delegate_to: "{{ inventory_hostname }}"
      failed_when: false

    - name: Handle unreachable host
      when: ping_result.failed | default(false)
      block:
        - name: Mark host as unreachable in report
          ansible.builtin.shell: |
            echo '{{ inventory_hostname }},1,"unreachable"' >> {{ outfile }}
          delegate_to: localhost
        - meta: end_host

    - name: "Collect min facts"
      ansible.builtin.setup:
        gather_subset: min

    - name: "Import variables from hostvars"
      when: staging_host != 'localhost'
      ansible.builtin.set_fact:
        src: "{{ staging_folder }}/{{ src_basename }}"

    - name: "Expand '~'"
      when: target_folder == '~'
      block:
        - name: "Set target_folder to ansible_user_dir if target_folder is '~' and host is not ESXI"
          when: inventory_hostname not in groups['ESXI']
          ansible.builtin.set_fact:
            target_folder: "{{ ansible_user_dir }}"

        - name: "Set target_folder to ansible_user_dir if target_folder is '~' and host is ESXI"
          when: inventory_hostname in groups['ESXI']
          block:
            - name: "Get first VM ID"
              ansible.builtin.shell: vim-cmd vmsvc/getallvms | awk 'NR==2 {print $1}'
              register: first_vmid

            - name: "Get URL of vmid datastore"
              ansible.builtin.shell: vim-cmd vmsvc/get.datastores {{ first_vmid.stdout | trim }} | grep '^url' | awk '{print $2}'
              register: datastore_url
              when: first_vmid.stdout | length > 0

            - name: "Set target_folder to datastore URL if 'datastore_url' is defined"
              ansible.builtin.set_fact:
                datastore: "{{ datastore_url.stdout | trim }}"
              when: datastore_url.stdout | length > 0

            - name: "Set target_folder to datastore URL with default '/vmfs/volumes/datastore1'"
              ansible.builtin.set_fact:
                target_folder: "{{ datastore | default('/vmfs/volumes/datastore1') }}"

    - name: "Outer block with rescue"
      block:
        - name: "Get available disk space on '{{ target_folder }}'"
          become: true
          ansible.builtin.shell: df {{ target_folder }} | awk 'NR==2 {print $4}'
          register: target_folder_disk_space

        - name: "Fail if disk space in '{{ target_folder }}' is insufficient"
          when: (target_folder_disk_space.stdout | int * 1024) < src_info.stat.size
          ansible.builtin.fail:
            msg: >-
              Disk space on {{ staging_host }}:{{ staging_folder }} is insufficient
              Required: {{ (src_info.stat.size | int / 1048576) | int }} MB,
              Available: {{ (staging_folder_disk_space.stdout | int * 1024 / 1048576) | int }} MB

        - name: "Get file status for '{{ src_basename }}' on targets"
          ansible.builtin.stat:
            path: "{{ target_folder }}/{{ src_basename }}"
            checksum_algorithm: md5
          register: target_file_info

        - name: "SCP '{{ src_basename }}' to targets"
          when: not target_file_info.stat.exists or
                (target_file_info.stat.checksum != src_info.stat.checksum)
          scp_expect:
            src: "{{ staging_folder }}/{{ src_basename }}"
            dest: "{{ target_folder }}"
            host: "{{ hostvars[inventory_hostname]['ansible_host'] }}"
            user: "{{ hostvars[inventory_hostname]['ansible_user'] }}"
            password: "{{ hostvars[inventory_hostname]['ansible_ssh_pass'] }}"
          delegate_to: "{{ staging_host }}"
          register: result

        - name: "Get file status for '{{ src_basename }}' on targets"
          ansible.builtin.stat:
            path: "{{ target_folder }}/{{ src_basename }}"
            checksum_algorithm: md5
          register: target_file_info

        - name: "Fail if copying '{{ src_basename }}' to '{{ target_folder }}' failed"
          when:
            - not result.skipped | default(false)
            - result is defined
            - result.failed or target_file_info.stat.checksum != src_info.stat.checksum
          ansible.builtin.fail:
            msg: "Copying '{{ src }}' to '{{ target }}:{{ target_folder }}' failed"

        - name: "Append host to '{{ outfile }}' with success"
          ansible.builtin.shell: |
            echo '{{ inventory_hostname }},0,' >> {{ outfile }}
          delegate_to: localhost

      rescue:
        - name: "Append host to '{{ outfile }}' with failure"
          vars:
            error: "{{
                ansible_failed_result.stderr_lines | join(' ') if ansible_failed_result.stderr | length > 0 else
                ansible_failed_result.stdout_lines | join(' ') if ansible_failed_result.stdout | length > 0 else
                'generic failure'
              }}"
          ansible.builtin.shell: |
            echo '{{ inventory_hostname }},{{ ansible_failed_result.rc }},"{{ error }}"' >> {{ outfile }}
          delegate_to: localhost
...
