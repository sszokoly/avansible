---
# Gather certificate info
-
  ############################################################################
  #                         SYSTEM MANAGER CERTIFICATES                      #
  ############################################################################
  hosts: smgr
  gather_facts: False

  # Vars: variables that will apply to the play
  vars:
    outfile: "certificates.csv"
    smgr: sd36smgr1

  # Tasks: the list of tasks that will be executed within the playbook
  tasks:
    ########################### WEBLM CERTIFICATE ###########################
    - name: weblm_certificate_chain
      getcerts:
        host: "{{ ansible_host }}"
        port: 52233
      register: rv
      #ignore_unreachable: yes
    
    - name: weblm_certificate
      community.crypto.x509_certificate_info:
        content: "{{ rv.certs | first | join }}"
      register: cert
      delegate_to: localhost
      when: rv.certs is defined

    - name: dump_weblm_certificate
      vars:
        certname: weblm
        pgrp: "{{ group_names | first | default('') }}"
        cgrp: "{{ group_names | last | default('') }}"
        scn: "{{ cert.subject.commonName | default('') }}"
        icn: "{{ cert.issuer.commonName | default('') }}"
        notaf: "{{ (cert.not_after | to_datetime_with_default('%Y%m%d%H%M%SZ')) }}"
        notbf: "{{ (cert.not_before | to_datetime_with_default('%Y%m%d%H%M%SZ')) }}"
        serial: "{{ cert.serial_number | int2hexstr }}"
      lineinfile:
        line: "{{ inventory_hostname }},{{ ansible_host }},{{ pgrp }},{{ cgrp }},{{ certname }},{{ scn }},{{ icn }},{{ notbf }},{{ notaf }},{{ serial }}"
        insertafter: EOF
        dest: "{{ outfile }}"
        create: yes
      delegate_to: localhost
      ignore_errors: true

    ######################## CONTAINER_TLS CERTIFICATE #######################
    - name: container_tls_chain
      getcerts:
        host: "{{ ansible_host }}"
        port: 443
      register: rv
      ignore_unreachable: yes
    
    - name: container_tls_certificate
      community.crypto.x509_certificate_info:
        content: "{{ rv.certs | first | join }}"
      register: cert
      delegate_to: localhost
      when: rv.certs is defined

    - name: dump_container_tls_certificate
      vars:
        certname: container_tls
        pgrp: "{{ group_names | first | default('') }}"
        cgrp: "{{ group_names | last | default('') }}"
        scn: "{{ cert.subject.commonName | default('') }}"
        icn: "{{ cert.issuer.commonName | default('') }}"
        notaf: "{{ (cert.not_after | to_datetime_with_default('%Y%m%d%H%M%SZ')) }}"
        notbf: "{{ (cert.not_before | to_datetime_with_default('%Y%m%d%H%M%SZ')) }}"
        serial: "{{ cert.serial_number | int2hexstr }}"
      lineinfile:
        line: "{{ inventory_hostname }},{{ ansible_host }},{{ pgrp }},{{ cgrp }},{{ certname }},{{ scn }},{{ icn }},{{ notbf }},{{ notaf }},{{ serial }}"
        insertafter: EOF
        dest: "{{ outfile }}"
        create: yes
      delegate_to: localhost
      ignore_errors: true

    ######################### DATA_STORE CERTIFICATE #########################
    - name: data_store_certificate_chain
      getcerts:
        host: 127.0.0.1
        port: 5432
        starttls: postgres
      register: rv
      ignore_unreachable: yes

    - name: data_store_certificate
      community.crypto.x509_certificate_info:
        content: "{{ rv.certs | first | join }}"
      delegate_to: localhost
      register: cert
      when: rv.certs is defined

    - name: dump_data_store_certificate
      vars:
        certname: data_store
        pgrp: "{{ group_names | first | default('') }}"
        cgrp: "{{ group_names | last | default('') }}"
        scn: "{{ cert.subject.commonName | default('') }}"
        icn: "{{ cert.issuer.commonName | default('') }}"
        notaf: "{{ (cert.not_after | to_datetime_with_default('%Y%m%d%H%M%SZ')) }}"
        notbf: "{{ (cert.not_before | to_datetime_with_default('%Y%m%d%H%M%SZ')) }}"
        serial: "{{ cert.serial_number | int2hexstr }}"
      lineinfile:
        line: "{{ inventory_hostname }},{{ ansible_host }},{{ pgrp }},{{ cgrp }},{{ certname }},{{ scn }},{{ icn }},{{ notbf }},{{ notaf }},{{ serial }}"
        insertafter: EOF
        dest: "{{ outfile }}"
        create: yes
      delegate_to: localhost
      ignore_errors: true

    ########################### PSQLSU CERTIFICATE ###########################
    - name: psqlSU_certificate_chain
      slurp:
        src: /opt/Avaya/JBoss/wildfly-10.1.0.Final/avmgmt/configuration/tm/keystore/psqlSU.pem
      register: rv
      become: yes
      ignore_unreachable: yes
      ignore_errors: yes

    - name: psqlSU_certificate
      vars:
        ident_regex: "(-----BEGIN CERTIFICATE-----.+?-----END CERTIFICATE-----)"
        ident_cert: "{{ rv['content'] | b64decode }}"
      community.crypto.x509_certificate_info:
        content: "{{ ident_cert }}"
      delegate_to: localhost
      register: cert
      when: rv.content is defined

    - name: dump_psqlSU_certificate
      vars:
        certname: psqlSU
        pgrp: "{{ group_names | first | default('') }}"
        cgrp: "{{ group_names | last | default('') }}"
        scn: "{{ cert.subject.commonName | default('') }}"
        icn: "{{ cert.issuer.commonName | default('') }}"
        notaf: "{{ (cert.not_after | to_datetime_with_default('%Y%m%d%H%M%SZ')) }}"
        notbf: "{{ (cert.not_before | to_datetime_with_default('%Y%m%d%H%M%SZ')) }}"
        serial: "{{ cert.serial_number | int2hexstr }}"
      lineinfile:
        line: "{{ inventory_hostname }},{{ ansible_host }},{{ pgrp }},{{ cgrp }},{{ certname }},{{ scn }},{{ icn }},{{ notbf }},{{ notaf }},{{ serial }}"
        insertafter: EOF
        dest: "{{ outfile }}"
        create: yes
      delegate_to: localhost
      ignore_errors: true

    ########################### SYSLOG CERTIFICATE ###########################
    - name: syslog_certificate_chain
      slurp:
        src: /opt/Avaya/JBoss/wildfly-10.1.0.Final/avmgmt/configuration/tm/keystore/syslog_keystore.pem
      register: rv
      become: yes
      ignore_unreachable: yes
      ignore_errors: yes

    - name: syslog_certificate
      vars:
        ident_regex: "(-----BEGIN CERTIFICATE-----.+?-----END CERTIFICATE-----)"
        ident_cert: "{{ rv['content'] | b64decode }}"
      community.crypto.x509_certificate_info:
        content: "{{ ident_cert }}"
      register: cert
      delegate_to: localhost
      when: rv.content is defined

    - name: dump_syslog_certificate
      vars:
        certname: syslog
        pgrp: "{{ group_names | first | default('') }}"
        cgrp: "{{ group_names | last | default('') }}"
        scn: "{{ cert.subject.commonName | default('') }}"
        icn: "{{ cert.issuer.commonName | default('') }}"
        notaf: "{{ (cert.not_after | to_datetime_with_default('%Y%m%d%H%M%SZ')) }}"
        notbf: "{{ (cert.not_before | to_datetime_with_default('%Y%m%d%H%M%SZ')) }}"
        serial: "{{ cert.serial_number | int2hexstr }}"
      lineinfile:
        line: "{{ inventory_hostname }},{{ ansible_host }},{{ pgrp }},{{ cgrp }},{{ certname }},{{ scn }},{{ icn }},{{ notbf }},{{ notaf }},{{ serial }}"
        insertafter: EOF
        dest: "{{ outfile }}"
        create: yes
      delegate_to: localhost
      ignore_errors: true
-
  ############################################################################
  #                        SESSION MANAGER CERTIFICATES                      #
  ############################################################################
  hosts: sm
  gather_facts: False

  # Vars: variables that will apply to the play
  vars:
    outfile: "certificates.csv"
    smgr: sd36smgr1

  # Tasks: the list of tasks that will be executed within the playbook
  tasks:
    - name: smconfig
      ansible.builtin.shell: sudo /opt/Avaya/bin/smconfig
      register: smconfig
      ignore_unreachable: yes

    ##################### SECURITYMODULE_SIP CERTIFICATE #####################
    - name: securitymodule_sip_certificate_chain
      vars:
        secmodip_regex: "Local Security Module: ([^ \n]+)"
        secmodip: "{{ smconfig.stdout | regex_search(secmodip_regex, '\\1') | first }}"
      getcerts:
        host: "{{ secmodip }}"
        port: 5061
      register: rv
      delegate_to: "{{ smgr }}"
      when: smconfig.stdout is defined
    
    - name: securitymodule_sip_certificate
      community.crypto.x509_certificate_info:
        content: "{{ rv.certs | first | join }}"
      register: cert
      delegate_to: localhost
      when: rv.certs is defined

    - name: dump_securitymodule_sip_certificate
      vars:
        certname: securitymodule_sip
        pgrp: "{{ group_names | first | default('') }}"
        cgrp: "{{ group_names | last | default('') }}"
        scn: "{{ cert.subject.commonName | default('') }}"
        icn: "{{ cert.issuer.commonName | default('') }}"
        notaf: "{{ (cert.not_after | to_datetime_with_default('%Y%m%d%H%M%SZ')) }}"
        notbf: "{{ (cert.not_before | to_datetime_with_default('%Y%m%d%H%M%SZ')) }}"
        serial: "{{ cert.serial_number | int2hexstr }}"
      lineinfile:
        line: "{{ inventory_hostname }},{{ ansible_host }},{{ pgrp }},{{ cgrp }},{{ certname }},{{ scn }},{{ icn }},{{ notbf }},{{ notaf }},{{ serial }}"
        insertafter: EOF
        dest: "{{ outfile }}"
        create: yes
      delegate_to: localhost
      ignore_errors: true

    ##################### SECURITYMODULE_HTTP CERTIFICATE ####################
    - name: securitymodule_http_certificate_chain
      vars:
        secmodip_regex: "Local Security Module: ([^ \n]+)"
        secmodip: "{{ smconfig.stdout | regex_search(secmodip_regex, '\\1') | first }}"
      getcerts:
        host: "{{ secmodip }}"
        port: 443
      register: rv
      delegate_to: "{{ smgr }}"
      when: smconfig.stdout is defined
    
    - name: securitymodule_http_certificate
      community.crypto.x509_certificate_info:
        content: "{{ rv.certs | first | join }}"
      register: cert
      delegate_to: localhost
      when: rv.certs is defined

    - name: dump_securitymodule_http_certificate
      vars:
        certname: securitymodule_http
        pgrp: "{{ group_names | first | default('') }}"
        cgrp: "{{ group_names | last | default('') }}"
        scn: "{{ cert.subject.commonName | default('') }}"
        icn: "{{ cert.issuer.commonName | default('') }}"
        notaf: "{{ (cert.not_after | to_datetime_with_default('%Y%m%d%H%M%SZ')) }}"
        notbf: "{{ (cert.not_before | to_datetime_with_default('%Y%m%d%H%M%SZ')) }}"
        serial: "{{ cert.serial_number | int2hexstr }}"
      lineinfile:
        line: "{{ inventory_hostname }},{{ ansible_host }},{{ pgrp }},{{ cgrp }},{{ certname }},{{ scn }},{{ icn }},{{ notbf }},{{ notaf }},{{ serial }}"
        insertafter: EOF
        dest: "{{ outfile }}"
        create: yes
      delegate_to: localhost
      ignore_errors: true
    
    ############################ MGMT CERTIFICATE ############################
    - name: mgmt_certificate_chain
      getcerts:
        host: "{{ ansible_host }}"
        port: 2009
      register: rv
      delegate_to: "{{ smgr }}"
      ignore_unreachable: yes
    
    - name: mgmt_certificate
      community.crypto.x509_certificate_info:
        content: "{{ rv.certs | first | join }}"
      register: cert
      delegate_to: localhost
      when: rv.certs is defined

    - name: dump_mgmt_certificate
      vars:
        certname: mgmt
        pgrp: "{{ group_names | first | default('') }}"
        cgrp: "{{ group_names | last | default('') }}"
        scn: "{{ cert.subject.commonName | default('') }}"
        icn: "{{ cert.issuer.commonName | default('') }}"
        notaf: "{{ (cert.not_after | to_datetime_with_default('%Y%m%d%H%M%SZ')) }}"
        notbf: "{{ (cert.not_before | to_datetime_with_default('%Y%m%d%H%M%SZ')) }}"
        serial: "{{ cert.serial_number | int2hexstr }}"
      lineinfile:
        line: "{{ inventory_hostname }},{{ ansible_host }},{{ pgrp }},{{ cgrp }},{{ certname }},{{ scn }},{{ icn }},{{ notbf }},{{ notaf }},{{ serial }}"
        insertafter: EOF
        dest: "{{ outfile }}"
        create: yes
      delegate_to: localhost
      ignore_errors: true

    ########################## POSTGRES CERTIFICATE ##########################
    - name: postgres_certificate_chain
      getcerts:
        host: 127.0.0.1
        port: 5432
        starttls: postgres
      register: rv
      ignore_unreachable: yes
    
    - name: postgres_certificate
      community.crypto.x509_certificate_info:
        content: "{{ rv.certs | first | join }}"
      register: cert
      delegate_to: localhost
      when: rv.certs is defined
    
    - name: dump_postgres_certificate
      vars:
        certname: postgres
        pgrp: "{{ group_names | first | default('') }}"
        cgrp: "{{ group_names | last | default('') }}"
        scn: "{{ cert.subject.commonName | default('') }}"
        icn: "{{ cert.issuer.commonName | default('') }}"
        notaf: "{{ (cert.not_after | to_datetime_with_default('%Y%m%d%H%M%SZ')) }}"
        notbf: "{{ (cert.not_before | to_datetime_with_default('%Y%m%d%H%M%SZ')) }}"
        serial: "{{ cert.serial_number | int2hexstr }}"
      lineinfile:
        line: "{{ inventory_hostname }},{{ ansible_host }},{{ pgrp }},{{ cgrp }},{{ certname }},{{ scn }},{{ icn }},{{ notbf }},{{ notaf }},{{ serial }}"
        insertafter: EOF
        dest: "{{ outfile }}"
        create: yes
      delegate_to: localhost
      ignore_errors: true
    
    ########################## SYSLOG CERTIFICATE ##########################
    - name: syslog_certificate_chain
      slurp:
        src: $JBOSS_HOME/standalone/configuration/tm/keystore/syslog_keystore.pem
      register: rv
      become: yes
      ignore_errors: true

    - name: syslog_certificate
      vars:
        ident_regex: "(-----BEGIN CERTIFICATE-----.+?-----END CERTIFICATE-----)"
        ident_cert: "{{ rv['content'] | b64decode }}"
      community.crypto.x509_certificate_info:
        content: "{{ ident_cert }}"
      register: cert
      delegate_to: localhost
      when: rv.content is defined

    - name: dump_syslog_certificate
      vars:
        certname: syslog
        pgrp: "{{ group_names | first | default('') }}"
        cgrp: "{{ group_names | last | default('') }}"
        scn: "{{ cert.subject.commonName | default('') }}"
        icn: "{{ cert.issuer.commonName | default('') }}"
        notaf: "{{ (cert.not_after | to_datetime_with_default('%Y%m%d%H%M%SZ')) }}"
        notbf: "{{ (cert.not_before | to_datetime_with_default('%Y%m%d%H%M%SZ')) }}"
        serial: "{{ cert.serial_number | int2hexstr }}"
      lineinfile:
        line: "{{ inventory_hostname }},{{ ansible_host }},{{ pgrp }},{{ cgrp }},{{ certname }},{{ scn }},{{ icn }},{{ notbf }},{{ notaf }},{{ serial }}"
        insertafter: EOF
        dest: "{{ outfile }}"
        create: yes
      delegate_to: localhost
      ignore_errors: true
-
  ############################################################################
  #                            BREEZE CERTIFICATES                           #
  ############################################################################
  hosts: breeze
  gather_facts: False

  # Vars: variables that will apply to the play
  vars:
    outfile: "certificates.csv"
    smgr: sd36smgr1

  # Tasks: the list of tasks that will be executed within the playbook
  tasks:
    - name: ceconfig
      ansible.builtin.shell: sudo /opt/Avaya/bin/ceconfig
      register: ceconfig
      ignore_unreachable: yes

    ##################### SECURITYMODULE_SIP CERTIFICATE #####################
    - name: securitymodule_sip_certificate_chain
      vars:
        secmodip_regex: "Local Security Module: ([^ \n]+)"
        secmodip: "{{ ceconfig.stdout | regex_search(secmodip_regex, '\\1') | first }}"
      getcerts:
        host: "{{ secmodip }}"
        port: 5061
      register: rv
      delegate_to: "{{ smgr }}"
      when: ceconfig.stdout is defined
    
    - name: securitymodule_sip_certificate
      community.crypto.x509_certificate_info:
        content: "{{ rv.certs | first | join }}"
      register: cert
      delegate_to: localhost
      when: rv.certs is defined

    - name: dump_securitymodule_sip_certificate
      vars:
        certname: securitymodule_sip
        pgrp: "{{ group_names | first | default('') }}"
        cgrp: "{{ group_names | last | default('') }}"
        scn: "{{ cert.subject.commonName | default('') }}"
        icn: "{{ cert.issuer.commonName | default('') }}"
        notaf: "{{ (cert.not_after | to_datetime_with_default('%Y%m%d%H%M%SZ')) }}"
        notbf: "{{ (cert.not_before | to_datetime_with_default('%Y%m%d%H%M%SZ')) }}"
        serial: "{{ cert.serial_number | int2hexstr }}"
      lineinfile:
        line: "{{ inventory_hostname }},{{ ansible_host }},{{ pgrp }},{{ cgrp }},{{ certname }},{{ scn }},{{ icn }},{{ notbf }},{{ notaf }},{{ serial }}"
        insertafter: EOF
        dest: "{{ outfile }}"
        create: yes
      delegate_to: localhost
      ignore_errors: true

    ##################### SECURITYMODULE_HTTP CERTIFICATE ####################
    - name: securitymodule_http_certificate_chain
      vars:
        secmodip_regex: "Local Security Module: ([^ \n]+)"
        secmodip: "{{ ceconfig.stdout | regex_search(secmodip_regex, '\\1') | first }}"
      getcerts:
        host: "{{ secmodip }}"
        port: 443
      register: rv
      delegate_to: "{{ smgr }}"
      when: ceconfig.stdout is defined
    
    - name: securitymodule_http_certificate
      community.crypto.x509_certificate_info:
        content: "{{ rv.certs | first | join }}"
      register: cert
      delegate_to: localhost
      when: rv.certs is defined

    - name: dump_securitymodule_http_certificate
      vars:
        certname: securitymodule_http
        pgrp: "{{ group_names | first | default('') }}"
        cgrp: "{{ group_names | last | default('') }}"
        scn: "{{ cert.subject.commonName | default('') }}"
        icn: "{{ cert.issuer.commonName | default('') }}"
        notaf: "{{ (cert.not_after | to_datetime_with_default('%Y%m%d%H%M%SZ')) }}"
        notbf: "{{ (cert.not_before | to_datetime_with_default('%Y%m%d%H%M%SZ')) }}"
        serial: "{{ cert.serial_number | int2hexstr }}"
      lineinfile:
        line: "{{ inventory_hostname }},{{ ansible_host }},{{ pgrp }},{{ cgrp }},{{ certname }},{{ scn }},{{ icn }},{{ notbf }},{{ notaf }},{{ serial }}"
        insertafter: EOF
        dest: "{{ outfile }}"
        create: yes
      delegate_to: localhost
      ignore_errors: true
    
    ############################ MGMT CERTIFICATE ############################
    - name: mgmt_certificate_chain
      getcerts:
        host: "{{ ansible_host }}"
        port: 8643
      register: rv
      delegate_to: "{{ smgr }}"
      ignore_unreachable: yes
    
    - name: mgmt_certificate
      community.crypto.x509_certificate_info:
        content: "{{ rv.certs | first | join }}"
      register: cert
      delegate_to: localhost
      when: rv.certs is defined

    - name: dump_mgmt_certificate
      vars:
        certname: mgmt
        pgrp: "{{ group_names | first | default('') }}"
        cgrp: "{{ group_names | last | default('') }}"
        scn: "{{ cert.subject.commonName | default('') }}"
        icn: "{{ cert.issuer.commonName | default('') }}"
        notaf: "{{ (cert.not_after | to_datetime_with_default('%Y%m%d%H%M%SZ')) }}"
        notbf: "{{ (cert.not_before | to_datetime_with_default('%Y%m%d%H%M%SZ')) }}"
        serial: "{{ cert.serial_number | int2hexstr }}"
      lineinfile:
        line: "{{ inventory_hostname }},{{ ansible_host }},{{ pgrp }},{{ cgrp }},{{ certname }},{{ scn }},{{ icn }},{{ notbf }},{{ notaf }},{{ serial }}"
        insertafter: EOF
        dest: "{{ outfile }}"
        create: yes
      delegate_to: localhost
      ignore_errors: true

    ########################## WEBSPHERE CERTIFICATE #########################
    - name: websphere_certificate_chain
      getcerts:
        host: "{{ ansible_host }}"
        port: 9043
      register: rv
      ignore_unreachable: yes
    
    - name: websphere_certificate
      community.crypto.x509_certificate_info:
        content: "{{ rv.certs | first | join }}"
      register: cert
      delegate_to: localhost
      when: rv.certs is defined

    - name: dump_websphere_certificate
      vars:
        certname: websphere
        pgrp: "{{ group_names | first | default('') }}"
        cgrp: "{{ group_names | last | default('') }}"
        scn: "{{ cert.subject.commonName | default('') }}"
        icn: "{{ cert.issuer.commonName | default('') }}"
        notaf: "{{ (cert.not_after | to_datetime_with_default('%Y%m%d%H%M%SZ')) }}"
        notbf: "{{ (cert.not_before | to_datetime_with_default('%Y%m%d%H%M%SZ')) }}"
        serial: "{{ cert.serial_number | int2hexstr }}"
      lineinfile:
        line: "{{ inventory_hostname }},{{ ansible_host }},{{ pgrp }},{{ cgrp }},{{ certname }},{{ scn }},{{ icn }},{{ notbf }},{{ notaf }},{{ serial }}"
        insertafter: EOF
        dest: "{{ outfile }}"
        create: yes
      delegate_to: localhost
      ignore_errors: true
    
    ########################## POSTGRES CERTIFICATE ##########################
    - name: postgres_certificate_chain
      getcerts:
        host: 127.0.0.1
        port: 5432
        starttls: postgres
      register: rv
      ignore_unreachable: yes
    
    - name: postgres_certificate
      community.crypto.x509_certificate_info:
        content: "{{ rv.certs | first | join }}"
      register: cert
      delegate_to: localhost
      when: rv.certs is defined
    
    - name: dump_postgres_certificate
      vars:
        certname: postgres
        pgrp: "{{ group_names | first | default('') }}"
        cgrp: "{{ group_names | last | default('') }}"
        scn: "{{ cert.subject.commonName | default('') }}"
        icn: "{{ cert.issuer.commonName | default('') }}"
        notaf: "{{ (cert.not_after | to_datetime_with_default('%Y%m%d%H%M%SZ')) }}"
        notbf: "{{ (cert.not_before | to_datetime_with_default('%Y%m%d%H%M%SZ')) }}"
        serial: "{{ cert.serial_number | int2hexstr }}"
      lineinfile:
        line: "{{ inventory_hostname }},{{ ansible_host }},{{ pgrp }},{{ cgrp }},{{ certname }},{{ scn }},{{ icn }},{{ notbf }},{{ notaf }},{{ serial }}"
        insertafter: EOF
        dest: "{{ outfile }}"
        create: yes
      delegate_to: localhost
      ignore_errors: true

  ############################## CDB CERTIFICATE #############################
    - name: cdb_certificate_chain
      getcerts:
        host: "{{ ansible_host }}"
        port: 5433
        starttls: postgres
      register: rv
      ignore_unreachable: yes
    
    - name: cdb_certificate
      community.crypto.x509_certificate_info:
        content: "{{ rv.certs | first | join }}"
      register: cert
      delegate_to: localhost
      when: rv.certs is defined
    
    - name: dump_cdb_certificate
      vars:
        certname: cdb
        pgrp: "{{ group_names | first | default('') }}"
        cgrp: "{{ group_names | last | default('') }}"
        scn: "{{ cert.subject.commonName | default('') }}"
        icn: "{{ cert.issuer.commonName | default('') }}"
        notaf: "{{ (cert.not_after | to_datetime_with_default('%Y%m%d%H%M%SZ')) }}"
        notbf: "{{ (cert.not_before | to_datetime_with_default('%Y%m%d%H%M%SZ')) }}"
        serial: "{{ cert.serial_number | int2hexstr }}"
      lineinfile:
        line: "{{ inventory_hostname }},{{ ansible_host }},{{ pgrp }},{{ cgrp }},{{ certname }},{{ scn }},{{ icn }},{{ notbf }},{{ notaf }},{{ serial }}"
        insertafter: EOF
        dest: "{{ outfile }}"
        create: yes
      delegate_to: localhost
      ignore_errors: true
      
    ###################### AUTHORIZATION CERTIFICATE #######################
    - name: authorization_certificate_chain
      shell: echo|/usr/java/default/bin/keytool -exportcert -alias authorization -keystore $JBOSS_HOME/standalone/configuration/tm/keystore/authorization_keystore.jks -storetype jks -rfc 2>/dev/null
      register: rv
      ignore_errors: true

    - name: authorization_certificate
      community.crypto.x509_certificate_info:
        content: "{{ rv.stdout }}"
      register: cert
      delegate_to: localhost
      when: rv.stdout is defined

    - name: dump_authorization_certificate
      vars:
        certname: Authorization
        pgrp: "{{ group_names | first | default('') }}"
        cgrp: "{{ group_names | last | default('') }}"
        scn: "{{ cert.subject.commonName | default('') }}"
        icn: "{{ cert.issuer.commonName | default('') }}"
        notaf: "{{ (cert.not_after | to_datetime_with_default('%Y%m%d%H%M%SZ')) }}"
        notbf: "{{ (cert.not_before | to_datetime_with_default('%Y%m%d%H%M%SZ')) }}"
        serial: "{{ cert.serial_number | int2hexstr }}"
      lineinfile:
        line: "{{ inventory_hostname }},{{ ansible_host }},{{ pgrp }},{{ cgrp }},{{ certname }},{{ scn }},{{ icn }},{{ notbf }},{{ notaf }},{{ serial }}"
        insertafter: EOF
        dest: "{{ outfile }}"
        create: yes
      delegate_to: localhost
      ignore_errors: true
-
  ############################################################################
  #                              AADS CERTIFICATES                           #
  ############################################################################
  hosts: aads
  gather_facts: False

  # Vars: variables that will apply to the play
  vars:
    outfile: "certificates.csv"
    smgr: sd36smgr1

  # Tasks: the list of tasks that will be executed within the playbook
  tasks:
    ######################### APPLICATION CERTIFICATE ########################
    - name: application_certificate_chain
      getcerts:
        host: "{{ ansible_host }}"
        port: 443
      register: rv
      delegate_to: "{{ smgr }}"
      ignore_unreachable: yes
    
    - name: application_certificate
      community.crypto.x509_certificate_info:
        content: "{{ rv.certs | first | join }}"
      register: cert
      delegate_to: localhost
      when: rv.certs is defined

    - name: dump_application_certificate
      vars:
        certname: application
        pgrp: "{{ group_names | first | default('') }}"
        cgrp: "{{ group_names | last | default('') }}"
        scn: "{{ cert.subject.commonName | default('') }}"
        icn: "{{ cert.issuer.commonName | default('') }}"
        notaf: "{{ (cert.not_after | to_datetime_with_default('%Y%m%d%H%M%SZ')) }}"
        notbf: "{{ (cert.not_before | to_datetime_with_default('%Y%m%d%H%M%SZ')) }}"
        serial: "{{ cert.serial_number | int2hexstr }}"
      lineinfile:
        line: "{{ inventory_hostname }},{{ ansible_host }},{{ pgrp }},{{ cgrp }},{{ certname }},{{ scn }},{{ icn }},{{ notbf }},{{ notaf }},{{ serial }}"
        insertafter: EOF
        dest: "{{ outfile }}"
        create: yes
      delegate_to: localhost
      ignore_errors: true

    ########################### INTERNAL CERTIFICATE #########################
    - name: internal_certificate_chain
      getcerts:
        host: "{{ ansible_host }}"
        port: 8458
      register: rv
      delegate_to: "{{ smgr }}"
      ignore_unreachable: yes
    
    - name: internal_certificate
      community.crypto.x509_certificate_info:
        content: "{{ rv.certs | first | join }}"
      register: cert
      delegate_to: localhost
      when: rv.certs is defined

    - name: dump_internal_certificate
      vars:
        certname: internal
        pgrp: "{{ group_names | first | default('') }}"
        cgrp: "{{ group_names | last | default('') }}"
        scn: "{{ cert.subject.commonName | default('') }}"
        icn: "{{ cert.issuer.commonName | default('') }}"
        notaf: "{{ (cert.not_after | to_datetime_with_default('%Y%m%d%H%M%SZ')) }}"
        notbf: "{{ (cert.not_before | to_datetime_with_default('%Y%m%d%H%M%SZ')) }}"
        serial: "{{ cert.serial_number | int2hexstr }}"
      lineinfile:
        line: "{{ inventory_hostname }},{{ ansible_host }},{{ pgrp }},{{ cgrp }},{{ certname }},{{ scn }},{{ icn }},{{ notbf }},{{ notaf }},{{ serial }}"
        insertafter: EOF
        dest: "{{ outfile }}"
        create: yes
      delegate_to: localhost
      ignore_errors: true

    ############################# OAM CERTIFICATE ############################
    - name: oam_certificate_chain
      getcerts:
        host: "{{ ansible_host }}"
        port: 8445
      register: rv
      delegate_to: "{{ smgr }}"
      ignore_unreachable: yes
    
    - name: oam_certificate
      community.crypto.x509_certificate_info:
        content: "{{ rv.certs | first | join }}"
      register: cert
      delegate_to: localhost
      when: rv.certs is defined

    - name: dump_oam_certificate
      vars:
        certname: oam
        pgrp: "{{ group_names | first | default('') }}"
        cgrp: "{{ group_names | last | default('') }}"
        scn: "{{ cert.subject.commonName | default('') }}"
        icn: "{{ cert.issuer.commonName | default('') }}"
        notaf: "{{ (cert.not_after | to_datetime_with_default('%Y%m%d%H%M%SZ')) }}"
        notbf: "{{ (cert.not_before | to_datetime_with_default('%Y%m%d%H%M%SZ')) }}"
        serial: "{{ cert.serial_number | int2hexstr }}"
      lineinfile:
        line: "{{ inventory_hostname }},{{ ansible_host }},{{ pgrp }},{{ cgrp }},{{ certname }},{{ scn }},{{ icn }},{{ notbf }},{{ notaf }},{{ serial }}"
        insertafter: EOF
        dest: "{{ outfile }}"
        create: yes
      delegate_to: localhost
      ignore_errors: true
...